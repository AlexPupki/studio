
{
  "name": "Паттерн: «Двойной Шлюз для Server-Only» (Double-Gate Server Isolation)",
  "purpose": "Предотвратить утечку серверных зависимостей в клиентский бандл, которая приводит к критическим ошибкам сборки. Паттерн вводит две обязательные ступени защиты: на уровне файлов и на уровне импортов.",
  "principles": [
    "Любой код, использующий серверные API, должен быть явно помечен и изолирован.",
    "Клиентский код никогда не должен знать о существовании серверных реализаций.",
    "Конфигурация (ESLint, tsconfig) должна автоматически выявлять и блокировать нарушения этого паттерна."
  ],
  "rules": [
    {
      "name": "Правило 1: Транзитивная Директива 'use server'",
      "description": "Любой файл, который прямо или косвенно зависит от Node.js API (fs, crypto, process.env) или серверных SDK (@google-cloud/*), должен быть явно помечен как серверный. Эта директива 'заражает' весь стек вызовов.",
      "practice": "Все файлы с суффиксом `*.server.ts` или `*.server.tsx` **обязательно** должны начинаться с директивы `'use server';`."
    },
    {
      "name": "Правило 2: Разделение Контрактов и Реализаций",
      "description": "Чистые TypeScript-типы, интерфейсы и Zod-схемы (контракты) должны быть отделены от их серверных реализаций.",
      "practice": "Контракты находятся в `shared/` директории и не содержат серверного кода. Реализации (адаптеры к БД, API) находятся в `server/` и всегда помечены как `'use server'`."
    },
    {
      "name": "Правило 3: Строгие Границы Директорий и Суффиксов",
      "description": "Физическое разделение кода по директориям для предотвращения случайных импортов.",
      "practice": {
        "src/server/": "Только серверные реализации, все файлы имеют суффикс `*.server.ts` и директиву `'use server'`.",
        "src/client/": "Только клиентские компоненты, `*.client.tsx` с `'use client'`.",
        "src/shared/": "Универсальный код: типы, константы, чистые утилиты без Node.js API. Не содержит директив `'use client'` или `'use server'`."
      }
    },
    {
      "name": "Правило 4: Запрет на «Универсальные» Barrel-файлы",
      "description": "Общие `index.ts` файлы часто становятся причиной случайного ре-экспорта серверного кода в shared-пространство.",
      "practice": "Вместо одного `index.ts`, использовать `index.shared.ts` для экспорта общих типов и `index.server.ts` для экспорта серверных утилит."
    },
    {
      "name": "Правило 5: Ограниченные Точки Входа на Сервер",
      "description": "Клиент не может напрямую импортировать и вызывать серверные сервисы.",
      "practice": "Взаимодействие клиента с сервером происходит **исключительно** через Server Actions (функции, экспортируемые из файлов с `'use server'`)."
    }
  ],
  "enforcement": {
    "eslint": {
      "description": "ESLint используется как главный страж, блокирующий некорректные импорты на уровне CI/CD и в IDE.",
      "config_example": {
        "no-restricted-imports": [
          {
            "rule": "error",
            "patterns": [
              {
                "group": ["@server/*", "**/*.server"],
                "message": "Запрещено: Импорт серверного модуля вне другого серверного модуля. Используйте Server Action.",
                "allowed_in": ["**/*.server.ts", "**/*.server.tsx"]
              }
            ]
          },
          {
            "rule": "error",
            "paths": ["fs", "path", "crypto", "firebase-admin"],
            "message": "Запрещено: Прямой импорт Node.js API в клиентском или shared коде.",
            "allowed_in": ["**/*.server.ts", "**/*.server.tsx"]
          }
        ]
      }
    },
    "tsconfig": {
      "description": "Path-алиасы в `tsconfig.json` делают границы между слоями явными.",
      "config_example": {
        "paths": {
          "@server/*": ["src/server/*"],
          "@client/*": ["src/client/*"],
          "@shared/*": ["src/shared/*"]
        }
      }
    },
    "pre_commit_hook": {
      "description": "Рекомендуется добавить pre-commit/pre-push скрипт, который автоматически проверяет наличие директивы `'use server'` во всех `*.server.ts` файлах.",
      "status": "Not implemented, but recommended for future."
    }
  },
  "summary_rule": {
    "name": "Правило DGS (Double-Gate Server)",
    "points": [
      "1. Любой модуль, зависящий от серверных API, должен начинаться с `'use server'` и иметь суффикс `*.server.*`.",
      "2. Клиентские и shared-модули никогда не импортируют `*.server.*` или `@server/*`. Взаимодействие с сервером — только через Server Actions.",
      "3. Нарушения блокируются линтером и проверяются в CI."
    ]
  }
}
