
{
    "name": "The AutoProtokol Architecture: A Contract-Driven Modular Monolith",
    "purpose": "Этот документ — не теоретический справочник, а выстраданный на практике манифест нашей архитектуры. Он фиксирует правила, которые помогли нам справиться с самыми коварными ошибками (race conditions, потеря состояния, непредсказуемость AI). Следование этим правилам — залог стабильности и поддерживаемости проекта.",
    "principles": [
      {
        "name": "Единственный Источник Правды — Контракты и Фабрики",
        "description": "Никогда не создавать сервисы (AI, DB, Storage) напрямую. Всегда использовать связку: 1. Абстрактный Контракт (интерфейс в /types). 2. Конкретная Реализация (адаптер в /lib/services). 3. Асинхронная Фабрика (`create...Service`), которая читает настройки и возвращает готовую реализацию. Это наш главный защитный механизм от ошибок конфигурации и двойной инициализации.",
        "lesson_learned": "Инцидент 'Двойная Инициализация', когда разные экземпляры AI-сервиса с разными конфигами обрабатывали одну встречу."
      },
      {
        "name": "Неизменяемые DTO между слоями",
        "description": "Всегда передавать между функциями и этапами обработки полные, типизированные объекты данных (DTO, например, `Meeting`). Никогда не передавать частичные объекты или отдельные поля. Это предотвращает потерю контекста и состояния.",
        "lesson_learned": "Инцидент 'Потеря meetingId', когда на второй этап обработки приходил объект без ID, что приводило к краху."
      },
      {
        "name": "Промпт — это Техническое Задание, а не Просьба",
        "description": "Системные промпты должны быть структурированы как техническая спецификация с четкими разделами: ROLE, INPUT_DATA, OUTPUT_SPECIFICATION, USER_INSTRUCTIONS. Это минимизирует 'галюцинации' и 'утечки промпта', когда AI возвращает инструкции вместо результата.",
        "lesson_learned": "Инцидент 'Утечка Промпта', когда AI вернул текст шаблона вместо его выполнения."
      },
      {
        "name": "Максимальная Изоляция Тестов",
        "description": "Функции для тестирования (например, `testApiConnectionAction`) не должны иметь внешних зависимостей, кроме тестируемого API. Тест API не должен требовать работающего S3 или доступа к другим сервисам. Если для теста нужен файл, он должен лежать локально в /public.",
        "lesson_learned": "Инцидент с тестами STT, которые падали из-за зависимости от S3 и неправильной конфигурации."
      }
    ],
    "layers_of_defense": {
      "1_contracts": {
        "path": "src/types/index.ts",
        "description": "Слой чистых TypeScript-типов (`Meeting`, `User`, `ProviderConfig`). Определяет, 'что' мы передаем. Безопасен для импорта где угодно."
      },
      "2_data_access": {
        "path": "src/lib/data/*.data.ts",
        "description": "Низкоуровневый доступ к 'базе данных' (нашим JSON-файлам). Отвечает за чтение и запись. Ничего не знает о бизнес-логике."
      },
      "3_services_adapters": {
        "path": "src/lib/services/*.service.ts",
        "description": "Конкретные реализации (адаптеры) для работы с внешним миром: S3, LemonFox, Genkit, DeepSeek. Каждый адаптер 'знает' только о своем API и преобразует его ответ в наш внутренний формат (контракт из /types)."
      },
      "4_service_factory": {
        "path": "src/lib/services/ai.service.ts (функции create...)",
        "description": "Ключевой слой. Единственное место, где принимается решение, какой адаптер использовать. Читает настройки и собирает из адаптеров конкретный экземпляр сервиса. Инкапсулирует всю сложность конфигурации."
      },
      "5_server_actions": {
        "path": "src/lib/actions/*.actions.ts",
        "description": "Оркестратор. Получает запрос от UI, использует Фабрику (слой 4) для получения нужного сервиса и запускает бизнес-процесс (например, `processMeetingSteps`). Вызывает слой доступа к данным (слой 2) для сохранения результата."
      },
      "6_presentation_ui": {
        "path": "src/app/dashboard/**/*.tsx",
        "description": "UI-компоненты. 'Общаются' только с Серверными Экшенами (слой 5). Никогда не знают о существовании сервисов, адаптеров или фабрик."
      }
    },
    "key_takeaway": "Наша архитектура защищает нас от ошибок, заставляя всю сложность и конфигурацию проходить через узкое 'бутылочное горлышко' — Фабрику Сервисов. Это делает систему предсказуемой и легко отлаживаемой."
}
