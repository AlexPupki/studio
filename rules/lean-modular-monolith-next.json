
{
    "name": "lean-modular-monolith-next",
    "purpose": "Контрактно-ориентированная, но масштабируемая e-commerce-архитектура на Next.js (App Router) с применением Hexagonal/Clean подхода. Оптимизирована под малую команду и деплой в Google Cloud Run / Firebase Hosting.",
    "principles": [
      "Contract-First Development: интерфейсы API определяются в общем пакете `contracts`",
      "Single Repo, Multi-Package (pnpm workspaces)",
      "Hexagonal (Ports & Adapters) для бизнес-логики и внешних сервисов",
      "Модульное деление по доменным зонам (Catalog, Cart, AI, User)",
      "BFF — Server Actions, выступающие оркестратором для сервисных модулей",
      "Инфраструктура изолирована в server-only модулях с суффиксами .server.ts",
      "Pay-as-you-go хостинг: Cloud Run + Firestore/Cloud SQL + Cloud Storage"
    ],
    "modules": {
      "contracts": "общие интерфейсы и типы (`CatalogAPI`, `AIAPI`, `Product`)",
      "catalog-service": "реализация `CatalogAPI`, управление товарами",
      "ai-service": "реализация `AIAPI`, рекомендации, чат-боты",
      "user-service": "управление пользователями и аутентификацией",
      "bff": "оркестрация вызовов между сервисами для нужд UI",
      "web": "клиентский UI (Next.js-компоненты)"
    },
    "layers": {
      "contracts": {
        "path": "packages/contracts",
        "description": "Изолированный TypeScript-пакет с интерфейсами (`*.API.ts`) и типами (`*.dto.ts`). Безопасен для импорта всеми.",
        "allowedImports": []
      },
      "services": {
        "path": "packages/*-service",
        "description": "Реализации контрактов. Например, `ai-service` реализует `AIAPI`. Могут содержать .server.ts файлы.",
        "allowedImports": ["@shop/contracts", "@shop/domain"]
      },
      "bff": {
        "path": "packages/bff",
        "description": "Next.js Server Actions, вызывающие фабрики из сервисных модулей для получения конкретных реализаций API. Оркестрируют вызовы.",
        "allowedImports": ["@shop/*-service", "@shop/contracts"]
      },
      "ui": {
        "path": "packages/web",
        "description": "Клиентские React-компоненты. Не могут импортировать ничего из `*-service` напрямую, только из `bff` и `contracts`.",
        "allowedImports": ["@shop/bff", "@shop/contracts"]
      }
    },
    "lint": {
      "tool": "eslint",
      "rule": "no-restricted-imports",
      "config": {
        "patterns": [
          {
            "group": ["@shop/*-service", "*.server.ts"],
            "message": "Прямой импорт сервисного модуля в UI! Используйте action из BFF.",
            "contexts": ["packages/web/**"]
          }
        ]
      }
    },
    "ciCd": {
      "build": "next build && pnpm --filter \"./packages/**\" run build",
      "deploy": "gcloud run deploy shop-web --source=. --region=europe-central2 --platform=managed",
      "guardRails": [
        "Проверка размера клиентского бандла (например, bundlesize-action < 200kB)",
        "Запуск ESLint с правилом `no-direct-service-import-in-client`"
      ]
    },
    "aiIntegration": {
      "sdk": "GenKit",
      "pattern": "Contract & Adapter",
      "contract": "`AIAPI` в `packages/contracts`",
      "adapter": "`GenkitAdapter.server.ts` в `packages/ai-service`",
      "factory": "`createAIAPI()` в `packages/ai-service`"
    },
    "paymentIntegration": {
      "provider": "Stripe",
      "webhookPath": "/api/stripe/webhook",
      "secureKeyStore": "Secret Manager"
    },
    "testing": {
        "unit": "Jest/Vitest для доменной логики (use-cases).",
        "integration": "Тестирование Server Actions с моками сервисных фабрик (`createCatalogAPI`).",
        "contract": "Pact или Vitest для проверки соответствия сервиса своему контракту (`CatalogService` должен проходить тесты для `CatalogAPI`).",
        "e2e": "Playwright/Cypress для сквозных сценариев."
    },
    "checklistBeforeStart": [
      "Создать монорепо (pnpm init -w) с пакетами contracts, bff, web и сервисными модулями",
      "Настроить ESLint + Prettier + Husky pre-commit с правилом запрета прямого импорта сервисов в UI",
      "Определить первые контракты в `packages/contracts`",
      "Настроить CI с guard-rail на размер бандла.",
      "Начать реализацию с одного вертикального среза: контракт -> сервис -> bff -> ui"
    ]
  }
  
